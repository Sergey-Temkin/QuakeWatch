name: CI (Build • Lint • Smoke)

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]     # run deploy on version tags like v0.1.1
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} • ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pylint

      - name: Create lenient .pylintrc
        run: |
          cat > .pylintrc <<'RC'
          [MASTER]
          ignore=venv

          [MESSAGES CONTROL]
          disable=
              C0114, # missing-module-docstring
              C0115, # missing-class-docstring
              C0116, # missing-function-docstring
              R0903, # too-few-public-methods
              R0801, # duplicate-code

          [FORMAT]
          max-line-length=120
          RC

      - name: Lint with pylint
        run: |
          pylint app.py dashboard.py utils.py || true

      - name: Smoke test (import app & blueprint)
        run: |
          python - <<'PY'
          import sys
          try:
              import app as app_module
              import dashboard as dash_module
              print("Imported:", app_module.__name__, dash_module.__name__)
              create_app = getattr(app_module, "create_app", None)
              if callable(create_app):
                  app = create_app()
                  client = app.test_client()
                  r = client.get("/")
                  print("GET / ->", r.status_code)
                  assert r.status_code in (200, 302)
              else:
                  print("create_app() not found; skipped runtime check")
          except Exception as e:
              print("Smoke test failed:", e)
              sys.exit(1)
          PY

  docker-build:
    name: Docker build (no push)
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: quakewatch:ci
          load: false

  deploy:
    name: Helm package & push to GHCR
    runs-on: ubuntu-latest
    # only on tag pushes like refs/tags/v0.1.1, and only after tests pass
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set versions from tag
        id: vars
        run: |
          # GITHUB_REF_NAME is like "v0.1.1"
          TAG="${GITHUB_REF_NAME}"
          CHART_VERSION="${TAG#v}"     # strip leading "v"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "chart_version=${CHART_VERSION}" >> $GITHUB_OUTPUT

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.12.3

      - name: Bump Chart.yaml version to tag version
        working-directory: k8s/helm/quakewatch
        run: |
          CHART_VERSION="${{ steps.vars.outputs.chart_version }}"
          sed -i -E "s/^version:.*/version: ${CHART_VERSION}/" Chart.yaml
          echo "Updated Chart.yaml version to ${CHART_VERSION}"
          cat Chart.yaml

      - name: Helm lint
        working-directory: k8s/helm/quakewatch
        run: helm lint .

      - name: Package chart
        working-directory: k8s/helm
        run: |
          mkdir -p dist
          helm package quakewatch -d dist
          ls -l dist

      - name: Login to GHCR (OCI)
        env:
          HELM_EXPERIMENTAL_OCI: 1
        run: |
          echo "Logging in to ghcr.io as ${{ github.actor }}"
          helm registry login ghcr.io \
            -u "${{ github.actor }}" \
            -p "${{ secrets.GHCR_PAT }}"

      - name: Push chart to GHCR
        working-directory: k8s/helm
        env:
          HELM_EXPERIMENTAL_OCI: 1
        run: |
          FILE=$(ls dist/quakewatch-*.tgz)
          echo "Pushing $FILE"
          helm push "$FILE" oci://ghcr.io/sergey-temkin/charts
