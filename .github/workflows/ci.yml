name: CI (Build • Lint • Smoke)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} • ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pylint

      - name: Create lenient .pylintrc
        run: |
          cat > .pylintrc <<'RC'
          [MASTER]
          ignore=venv

          [MESSAGES CONTROL]
          disable=
              C0114, # missing-module-docstring
              C0115, # missing-class-docstring
              C0116, # missing-function-docstring
              R0903, # too-few-public-methods
              R0801, # duplicate-code (often noisy for small projects)

          [FORMAT]
          max-line-length=120
          RC

      - name: Lint with pylint
        run: |
          pylint app.py dashboard.py utils.py || true

      - name: Smoke test (import app & blueprint)
        run: |
          python - <<'PY'
          import sys
          import importlib
          try:
              import app as app_module
              import dashboard as dash_module
              print("Imported:", app_module.__name__, dash_module.__name__)
              # Try to create the Flask app (create_app())
              create_app = getattr(app_module, "create_app", None)
              if callable(create_app):
                  app = create_app()
                  client = app.test_client()
                  r = client.get("/")
                  print("GET / ->", r.status_code)
                  assert r.status_code in (200, 302)
              else:
                  print("create_app() not found; skipped runtime check")
          except Exception as e:
              print("Smoke test failed:", e)
              sys.exit(1)
          PY
